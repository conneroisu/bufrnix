syntax = "proto3";

package internal.v1;

import "common/v1/types.proto";
import "common/v1/status.proto";

option go_package = "github.com/example/backend/generated/go/internal/v1";

// Internal User Service for backend-to-backend communication
// This uses gRPC (not REST) and should not be generated for JavaScript

service UserService {
  // Create a new user (internal only)
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  
  // Get user by internal ID
  rpc GetUserByInternalId(GetUserByInternalIdRequest) returns (GetUserByInternalIdResponse);
  
  // Update user internal metadata
  rpc UpdateUserMetadata(UpdateUserMetadataRequest) returns (UpdateUserMetadataResponse);
  
  // Delete user permanently (admin only)
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  
  // Batch operations
  rpc BulkCreateUsers(BulkCreateUsersRequest) returns (BulkCreateUsersResponse);
  
  // Internal health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message CreateUserRequest {
  string email = 1;
  string name = 2;
  string hashed_password = 3;
  common.v1.UserStatus initial_status = 4;
  map<string, string> metadata = 5;
}

message CreateUserResponse {
  common.v1.ResponseStatus status = 1;
  common.v1.User user = 2;
  common.v1.ErrorDetails error = 3;
}

message GetUserByInternalIdRequest {
  int64 internal_id = 1;
  bool include_deleted = 2;
}

message GetUserByInternalIdResponse {
  common.v1.User user = 1;
  InternalUserMetadata metadata = 2;
}

message UpdateUserMetadataRequest {
  string user_id = 1;
  InternalUserMetadata metadata = 2;
  repeated string update_mask = 3;
}

message UpdateUserMetadataResponse {
  bool success = 1;
  InternalUserMetadata metadata = 2;
}

message DeleteUserRequest {
  string user_id = 1;
  bool hard_delete = 2; // true = permanent, false = soft delete
  string reason = 3;
}

message DeleteUserResponse {
  bool success = 1;
  string deletion_id = 2;
}

message BulkCreateUsersRequest {
  repeated CreateUserRequest users = 1;
  bool skip_duplicates = 2;
}

message BulkCreateUsersResponse {
  repeated common.v1.User created_users = 1;
  repeated common.v1.ErrorDetails errors = 2;
  int32 success_count = 3;
  int32 error_count = 4;
}

message HealthCheckRequest {
  string service_name = 1;
}

message HealthCheckResponse {
  common.v1.HealthCheck health = 1;
  ServiceMetrics metrics = 2;
}

// Internal-only metadata not exposed to frontend
message InternalUserMetadata {
  int64 internal_id = 1;
  string password_hash = 2;
  string salt = 3;
  repeated string roles = 4;
  repeated string permissions = 5;
  int64 last_login_at = 6;
  string last_login_ip = 7;
  int32 login_attempts = 8;
  bool is_locked = 9;
  int64 locked_until = 10;
  map<string, string> system_tags = 11;
}

message ServiceMetrics {
  int64 uptime_seconds = 1;
  int64 total_requests = 2;
  int64 active_connections = 3;
  double cpu_usage = 4;
  double memory_usage = 5;
}