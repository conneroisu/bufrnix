// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/v1/admin_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/example/backend/generated/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.ResponseStatus(0)
)

// Validate checks the field values on GetSystemStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemStatsRequestMultiError, or nil if none found.
func (m *GetSystemStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncludeDetailedMetrics

	if len(errors) > 0 {
		return GetSystemStatsRequestMultiError(errors)
	}

	return nil
}

// GetSystemStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSystemStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSystemStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemStatsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemStatsRequestMultiError) AllErrors() []error { return m }

// GetSystemStatsRequestValidationError is the validation error returned by
// GetSystemStatsRequest.Validate if the designated constraints aren't met.
type GetSystemStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemStatsRequestValidationError) ErrorName() string {
	return "GetSystemStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemStatsRequestValidationError{}

// Validate checks the field values on GetSystemStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemStatsResponseMultiError, or nil if none found.
func (m *GetSystemStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemStatsResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemStatsResponseMultiError(errors)
	}

	return nil
}

// GetSystemStatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSystemStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSystemStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemStatsResponseMultiError) AllErrors() []error { return m }

// GetSystemStatsResponseValidationError is the validation error returned by
// GetSystemStatsResponse.Validate if the designated constraints aren't met.
type GetSystemStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemStatsResponseValidationError) ErrorName() string {
	return "GetSystemStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemStatsResponseValidationError{}

// Validate checks the field values on SystemStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemStatsMultiError, or
// nil if none found.
func (m *SystemStats) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalUsers

	// no validation rules for ActiveUsers

	// no validation rules for SuspendedUsers

	// no validation rules for TotalRequestsToday

	// no validation rules for AvgResponseTimeMs

	// no validation rules for CacheHitRate

	// no validation rules for DatabaseConnections

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemStatsValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemStatsValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemStatsValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SystemStatsMultiError(errors)
	}

	return nil
}

// SystemStatsMultiError is an error wrapping multiple validation errors
// returned by SystemStats.ValidateAll() if the designated constraints aren't met.
type SystemStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemStatsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemStatsMultiError) AllErrors() []error { return m }

// SystemStatsValidationError is the validation error returned by
// SystemStats.Validate if the designated constraints aren't met.
type SystemStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemStatsValidationError) ErrorName() string { return "SystemStatsValidationError" }

// Error satisfies the builtin error interface
func (e SystemStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemStatsValidationError{}

// Validate checks the field values on ServiceHealth with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceHealth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceHealth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceHealthMultiError, or
// nil if none found.
func (m *ServiceHealth) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceHealth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Version

	// no validation rules for UptimeSeconds

	if len(errors) > 0 {
		return ServiceHealthMultiError(errors)
	}

	return nil
}

// ServiceHealthMultiError is an error wrapping multiple validation errors
// returned by ServiceHealth.ValidateAll() if the designated constraints
// aren't met.
type ServiceHealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceHealthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceHealthMultiError) AllErrors() []error { return m }

// ServiceHealthValidationError is the validation error returned by
// ServiceHealth.Validate if the designated constraints aren't met.
type ServiceHealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceHealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceHealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceHealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceHealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceHealthValidationError) ErrorName() string { return "ServiceHealthValidationError" }

// Error satisfies the builtin error interface
func (e ServiceHealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceHealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceHealthValidationError{}

// Validate checks the field values on FlushCacheRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FlushCacheRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushCacheRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlushCacheRequestMultiError, or nil if none found.
func (m *FlushCacheRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushCacheRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CacheType

	if len(errors) > 0 {
		return FlushCacheRequestMultiError(errors)
	}

	return nil
}

// FlushCacheRequestMultiError is an error wrapping multiple validation errors
// returned by FlushCacheRequest.ValidateAll() if the designated constraints
// aren't met.
type FlushCacheRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushCacheRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushCacheRequestMultiError) AllErrors() []error { return m }

// FlushCacheRequestValidationError is the validation error returned by
// FlushCacheRequest.Validate if the designated constraints aren't met.
type FlushCacheRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushCacheRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushCacheRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushCacheRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushCacheRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushCacheRequestValidationError) ErrorName() string {
	return "FlushCacheRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FlushCacheRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushCacheRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushCacheRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushCacheRequestValidationError{}

// Validate checks the field values on FlushCacheResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlushCacheResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushCacheResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlushCacheResponseMultiError, or nil if none found.
func (m *FlushCacheResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushCacheResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for EntriesFlushed

	if len(errors) > 0 {
		return FlushCacheResponseMultiError(errors)
	}

	return nil
}

// FlushCacheResponseMultiError is an error wrapping multiple validation errors
// returned by FlushCacheResponse.ValidateAll() if the designated constraints
// aren't met.
type FlushCacheResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushCacheResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushCacheResponseMultiError) AllErrors() []error { return m }

// FlushCacheResponseValidationError is the validation error returned by
// FlushCacheResponse.Validate if the designated constraints aren't met.
type FlushCacheResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushCacheResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushCacheResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushCacheResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushCacheResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushCacheResponseValidationError) ErrorName() string {
	return "FlushCacheResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FlushCacheResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushCacheResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushCacheResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushCacheResponseValidationError{}

// Validate checks the field values on RestartServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartServiceRequestMultiError, or nil if none found.
func (m *RestartServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Force

	if len(errors) > 0 {
		return RestartServiceRequestMultiError(errors)
	}

	return nil
}

// RestartServiceRequestMultiError is an error wrapping multiple validation
// errors returned by RestartServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type RestartServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartServiceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartServiceRequestMultiError) AllErrors() []error { return m }

// RestartServiceRequestValidationError is the validation error returned by
// RestartServiceRequest.Validate if the designated constraints aren't met.
type RestartServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartServiceRequestValidationError) ErrorName() string {
	return "RestartServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartServiceRequestValidationError{}

// Validate checks the field values on RestartServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartServiceResponseMultiError, or nil if none found.
func (m *RestartServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for RestartId

	if len(errors) > 0 {
		return RestartServiceResponseMultiError(errors)
	}

	return nil
}

// RestartServiceResponseMultiError is an error wrapping multiple validation
// errors returned by RestartServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type RestartServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartServiceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartServiceResponseMultiError) AllErrors() []error { return m }

// RestartServiceResponseValidationError is the validation error returned by
// RestartServiceResponse.Validate if the designated constraints aren't met.
type RestartServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartServiceResponseValidationError) ErrorName() string {
	return "RestartServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartServiceResponseValidationError{}

// Validate checks the field values on GetAllUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersRequestMultiError, or nil if none found.
func (m *GetAllUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllUsersRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllUsersRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllUsersRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllUsersRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllUsersRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllUsersRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAllUsersRequestMultiError(errors)
	}

	return nil
}

// GetAllUsersRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersRequestMultiError) AllErrors() []error { return m }

// GetAllUsersRequestValidationError is the validation error returned by
// GetAllUsersRequest.Validate if the designated constraints aren't met.
type GetAllUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersRequestValidationError) ErrorName() string {
	return "GetAllUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersRequestValidationError{}

// Validate checks the field values on GetAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersResponseMultiError, or nil if none found.
func (m *GetAllUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllUsersResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllUsersResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllUsersResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAllUsersResponseMultiError(errors)
	}

	return nil
}

// GetAllUsersResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersResponseMultiError) AllErrors() []error { return m }

// GetAllUsersResponseValidationError is the validation error returned by
// GetAllUsersResponse.Validate if the designated constraints aren't met.
type GetAllUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersResponseValidationError) ErrorName() string {
	return "GetAllUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersResponseValidationError{}

// Validate checks the field values on AdminUserFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminUserFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserFilterMultiError, or nil if none found.
func (m *AdminUserFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for IncludeDeleted

	// no validation rules for EmailPattern

	// no validation rules for CreatedAfter

	// no validation rules for CreatedBefore

	if len(errors) > 0 {
		return AdminUserFilterMultiError(errors)
	}

	return nil
}

// AdminUserFilterMultiError is an error wrapping multiple validation errors
// returned by AdminUserFilter.ValidateAll() if the designated constraints
// aren't met.
type AdminUserFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserFilterMultiError) AllErrors() []error { return m }

// AdminUserFilterValidationError is the validation error returned by
// AdminUserFilter.Validate if the designated constraints aren't met.
type AdminUserFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserFilterValidationError) ErrorName() string { return "AdminUserFilterValidationError" }

// Error satisfies the builtin error interface
func (e AdminUserFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserFilterValidationError{}

// Validate checks the field values on AdminUserView with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminUserView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserView with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminUserViewMultiError, or
// nil if none found.
func (m *AdminUserView) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUserViewValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUserViewValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUserViewValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUserViewValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUserViewValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUserViewValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRecentActivity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUserViewValidationError{
						field:  fmt.Sprintf("RecentActivity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUserViewValidationError{
						field:  fmt.Sprintf("RecentActivity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUserViewValidationError{
					field:  fmt.Sprintf("RecentActivity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminUserViewMultiError(errors)
	}

	return nil
}

// AdminUserViewMultiError is an error wrapping multiple validation errors
// returned by AdminUserView.ValidateAll() if the designated constraints
// aren't met.
type AdminUserViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserViewMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserViewMultiError) AllErrors() []error { return m }

// AdminUserViewValidationError is the validation error returned by
// AdminUserView.Validate if the designated constraints aren't met.
type AdminUserViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserViewValidationError) ErrorName() string { return "AdminUserViewValidationError" }

// Error satisfies the builtin error interface
func (e AdminUserViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserViewValidationError{}

// Validate checks the field values on SuspendUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuspendUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuspendUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuspendUserRequestMultiError, or nil if none found.
func (m *SuspendUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuspendUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Reason

	// no validation rules for UntilTimestamp

	if len(errors) > 0 {
		return SuspendUserRequestMultiError(errors)
	}

	return nil
}

// SuspendUserRequestMultiError is an error wrapping multiple validation errors
// returned by SuspendUserRequest.ValidateAll() if the designated constraints
// aren't met.
type SuspendUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuspendUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuspendUserRequestMultiError) AllErrors() []error { return m }

// SuspendUserRequestValidationError is the validation error returned by
// SuspendUserRequest.Validate if the designated constraints aren't met.
type SuspendUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuspendUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuspendUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuspendUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuspendUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuspendUserRequestValidationError) ErrorName() string {
	return "SuspendUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuspendUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuspendUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuspendUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuspendUserRequestValidationError{}

// Validate checks the field values on SuspendUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuspendUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuspendUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuspendUserResponseMultiError, or nil if none found.
func (m *SuspendUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuspendUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for SuspensionId

	if len(errors) > 0 {
		return SuspendUserResponseMultiError(errors)
	}

	return nil
}

// SuspendUserResponseMultiError is an error wrapping multiple validation
// errors returned by SuspendUserResponse.ValidateAll() if the designated
// constraints aren't met.
type SuspendUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuspendUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuspendUserResponseMultiError) AllErrors() []error { return m }

// SuspendUserResponseValidationError is the validation error returned by
// SuspendUserResponse.Validate if the designated constraints aren't met.
type SuspendUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuspendUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuspendUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuspendUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuspendUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuspendUserResponseValidationError) ErrorName() string {
	return "SuspendUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuspendUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuspendUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuspendUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuspendUserResponseValidationError{}

// Validate checks the field values on UnsuspendUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsuspendUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsuspendUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsuspendUserRequestMultiError, or nil if none found.
func (m *UnsuspendUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsuspendUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Reason

	if len(errors) > 0 {
		return UnsuspendUserRequestMultiError(errors)
	}

	return nil
}

// UnsuspendUserRequestMultiError is an error wrapping multiple validation
// errors returned by UnsuspendUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsuspendUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsuspendUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsuspendUserRequestMultiError) AllErrors() []error { return m }

// UnsuspendUserRequestValidationError is the validation error returned by
// UnsuspendUserRequest.Validate if the designated constraints aren't met.
type UnsuspendUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsuspendUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsuspendUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsuspendUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsuspendUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsuspendUserRequestValidationError) ErrorName() string {
	return "UnsuspendUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsuspendUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsuspendUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsuspendUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsuspendUserRequestValidationError{}

// Validate checks the field values on UnsuspendUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsuspendUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsuspendUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsuspendUserResponseMultiError, or nil if none found.
func (m *UnsuspendUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsuspendUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UnsuspendUserResponseMultiError(errors)
	}

	return nil
}

// UnsuspendUserResponseMultiError is an error wrapping multiple validation
// errors returned by UnsuspendUserResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsuspendUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsuspendUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsuspendUserResponseMultiError) AllErrors() []error { return m }

// UnsuspendUserResponseValidationError is the validation error returned by
// UnsuspendUserResponse.Validate if the designated constraints aren't met.
type UnsuspendUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsuspendUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsuspendUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsuspendUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsuspendUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsuspendUserResponseValidationError) ErrorName() string {
	return "UnsuspendUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsuspendUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsuspendUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsuspendUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsuspendUserResponseValidationError{}

// Validate checks the field values on ImpersonateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImpersonateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImpersonateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImpersonateUserRequestMultiError, or nil if none found.
func (m *ImpersonateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImpersonateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminUserId

	// no validation rules for TargetUserId

	// no validation rules for Reason

	// no validation rules for DurationSeconds

	if len(errors) > 0 {
		return ImpersonateUserRequestMultiError(errors)
	}

	return nil
}

// ImpersonateUserRequestMultiError is an error wrapping multiple validation
// errors returned by ImpersonateUserRequest.ValidateAll() if the designated
// constraints aren't met.
type ImpersonateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImpersonateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImpersonateUserRequestMultiError) AllErrors() []error { return m }

// ImpersonateUserRequestValidationError is the validation error returned by
// ImpersonateUserRequest.Validate if the designated constraints aren't met.
type ImpersonateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImpersonateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImpersonateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImpersonateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImpersonateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImpersonateUserRequestValidationError) ErrorName() string {
	return "ImpersonateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImpersonateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImpersonateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImpersonateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImpersonateUserRequestValidationError{}

// Validate checks the field values on ImpersonateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImpersonateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImpersonateUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImpersonateUserResponseMultiError, or nil if none found.
func (m *ImpersonateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImpersonateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ImpersonationToken

	// no validation rules for ExpiresAt

	if len(errors) > 0 {
		return ImpersonateUserResponseMultiError(errors)
	}

	return nil
}

// ImpersonateUserResponseMultiError is an error wrapping multiple validation
// errors returned by ImpersonateUserResponse.ValidateAll() if the designated
// constraints aren't met.
type ImpersonateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImpersonateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImpersonateUserResponseMultiError) AllErrors() []error { return m }

// ImpersonateUserResponseValidationError is the validation error returned by
// ImpersonateUserResponse.Validate if the designated constraints aren't met.
type ImpersonateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImpersonateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImpersonateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImpersonateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImpersonateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImpersonateUserResponseValidationError) ErrorName() string {
	return "ImpersonateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImpersonateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImpersonateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImpersonateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImpersonateUserResponseValidationError{}

// Validate checks the field values on GetAuditLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditLogsRequestMultiError, or nil if none found.
func (m *GetAuditLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ActionType

	// no validation rules for FromTimestamp

	// no validation rules for ToTimestamp

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuditLogsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuditLogsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuditLogsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuditLogsRequestMultiError(errors)
	}

	return nil
}

// GetAuditLogsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuditLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuditLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditLogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditLogsRequestMultiError) AllErrors() []error { return m }

// GetAuditLogsRequestValidationError is the validation error returned by
// GetAuditLogsRequest.Validate if the designated constraints aren't met.
type GetAuditLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditLogsRequestValidationError) ErrorName() string {
	return "GetAuditLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditLogsRequestValidationError{}

// Validate checks the field values on GetAuditLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditLogsResponseMultiError, or nil if none found.
func (m *GetAuditLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAuditLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAuditLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAuditLogsResponseValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuditLogsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuditLogsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuditLogsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuditLogsResponseMultiError(errors)
	}

	return nil
}

// GetAuditLogsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAuditLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuditLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditLogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditLogsResponseMultiError) AllErrors() []error { return m }

// GetAuditLogsResponseValidationError is the validation error returned by
// GetAuditLogsResponse.Validate if the designated constraints aren't met.
type GetAuditLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditLogsResponseValidationError) ErrorName() string {
	return "GetAuditLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditLogsResponseValidationError{}

// Validate checks the field values on AuditLogEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditLogEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLogEntry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditLogEntryMultiError, or
// nil if none found.
func (m *AuditLogEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLogEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ActionType

	// no validation rules for Description

	// no validation rules for IpAddress

	// no validation rules for UserAgent

	// no validation rules for Timestamp

	// no validation rules for Metadata

	if len(errors) > 0 {
		return AuditLogEntryMultiError(errors)
	}

	return nil
}

// AuditLogEntryMultiError is an error wrapping multiple validation errors
// returned by AuditLogEntry.ValidateAll() if the designated constraints
// aren't met.
type AuditLogEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogEntryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogEntryMultiError) AllErrors() []error { return m }

// AuditLogEntryValidationError is the validation error returned by
// AuditLogEntry.Validate if the designated constraints aren't met.
type AuditLogEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogEntryValidationError) ErrorName() string { return "AuditLogEntryValidationError" }

// Error satisfies the builtin error interface
func (e AuditLogEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLogEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogEntryValidationError{}

// Validate checks the field values on ExportUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportUserDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserDataRequestMultiError, or nil if none found.
func (m *ExportUserDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Format

	if len(errors) > 0 {
		return ExportUserDataRequestMultiError(errors)
	}

	return nil
}

// ExportUserDataRequestMultiError is an error wrapping multiple validation
// errors returned by ExportUserDataRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportUserDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserDataRequestMultiError) AllErrors() []error { return m }

// ExportUserDataRequestValidationError is the validation error returned by
// ExportUserDataRequest.Validate if the designated constraints aren't met.
type ExportUserDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserDataRequestValidationError) ErrorName() string {
	return "ExportUserDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserDataRequestValidationError{}

// Validate checks the field values on ExportUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportUserDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserDataResponseMultiError, or nil if none found.
func (m *ExportUserDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ExportId

	// no validation rules for DownloadUrl

	// no validation rules for ExpiresAt

	if len(errors) > 0 {
		return ExportUserDataResponseMultiError(errors)
	}

	return nil
}

// ExportUserDataResponseMultiError is an error wrapping multiple validation
// errors returned by ExportUserDataResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportUserDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserDataResponseMultiError) AllErrors() []error { return m }

// ExportUserDataResponseValidationError is the validation error returned by
// ExportUserDataResponse.Validate if the designated constraints aren't met.
type ExportUserDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserDataResponseValidationError) ErrorName() string {
	return "ExportUserDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserDataResponseValidationError{}
