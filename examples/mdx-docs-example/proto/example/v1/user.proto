syntax = "proto3";

package example.v1;

/**
 * User represents a user in the system.
 * This message contains all the essential information about a user.
 */
message User {
  // Unique identifier for the user
  string id = 1;

  // Full name of the user
  string name = 2;

  // Email address (must be valid)
  string email = 3;

  // User's age in years
  int32 age = 4;

  // Whether the user account is active
  bool is_active = 5;

  // User's role in the system
  UserRole role = 6;

  // User's profile settings
  UserProfile profile = 7;

  // Timestamps for audit trail
  int64 created_at = 8;
  int64 updated_at = 9;
}

/**
 * UserRole defines the different roles a user can have.
 */
enum UserRole {
  // Default role - basic user
  USER_ROLE_UNSPECIFIED = 0;

  // Regular user with standard permissions
  USER_ROLE_USER = 1;

  // Administrator with elevated permissions
  USER_ROLE_ADMIN = 2;

  // Super administrator with full system access
  USER_ROLE_SUPER_ADMIN = 3;
}

/**
 * UserProfile contains additional profile information.
 */
message UserProfile {
  // User's avatar URL
  string avatar_url = 1;

  // User's bio or description
  string bio = 2;

  // User's timezone
  string timezone = 3;

  // User's preferred language
  string language = 4;

  // User's notification preferences
  NotificationSettings notifications = 5;
}

/**
 * NotificationSettings defines user's notification preferences.
 */
message NotificationSettings {
  // Whether to receive email notifications
  bool email_enabled = 1;

  // Whether to receive push notifications
  bool push_enabled = 2;

  // Whether to receive SMS notifications
  bool sms_enabled = 3;
}

/**
 * CreateUserRequest is used to create a new user.
 */
message CreateUserRequest {
  // User data to create
  User user = 1;
}

/**
 * CreateUserResponse returns the created user.
 */
message CreateUserResponse {
  // The created user
  User user = 1;
}

/**
 * GetUserRequest is used to retrieve a user by ID.
 */
message GetUserRequest {
  // ID of the user to retrieve
  string id = 1;
}

/**
 * GetUserResponse returns the requested user.
 */
message GetUserResponse {
  // The requested user
  User user = 1;
}

/**
 * UpdateUserRequest is used to update an existing user.
 */
message UpdateUserRequest {
  // User data to update
  User user = 1;

  // Fields to update (field mask)
  repeated string update_mask = 2;
}

/**
 * UpdateUserResponse returns the updated user.
 */
message UpdateUserResponse {
  // The updated user
  User user = 1;
}

/**
 * DeleteUserRequest is used to delete a user.
 */
message DeleteUserRequest {
  // ID of the user to delete
  string id = 1;
}

/**
 * DeleteUserResponse is empty as deletion doesn't return data.
 */
message DeleteUserResponse {}

/**
 * ListUsersRequest is used to list users with pagination.
 */
message ListUsersRequest {
  // Maximum number of users to return
  int32 page_size = 1;

  // Token for pagination
  string page_token = 2;

  // Filter users by role
  UserRole role_filter = 3;

  // Filter users by active status
  optional bool active_filter = 4;
}

/**
 * ListUsersResponse returns a list of users.
 */
message ListUsersResponse {
  // List of users
  repeated User users = 1;

  // Token for next page (empty if no more pages)
  string next_page_token = 2;

  // Total number of users (for pagination info)
  int32 total_count = 3;
}

/**
 * UserService provides operations for managing users.
 * This service handles all user-related operations including
 * creation, retrieval, updates, and deletion.
 */
service UserService {
  /**
   * CreateUser creates a new user in the system.
   *
   * This method validates the user data and creates a new user
   * with a unique ID. The email must be unique across all users.
   */
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);

  /**
   * GetUser retrieves a user by their unique ID.
   *
   * Returns an error if the user is not found.
   */
  rpc GetUser(GetUserRequest) returns (GetUserResponse);

  /**
   * UpdateUser updates an existing user's information.
   *
   * Uses field mask to specify which fields to update.
   * Only specified fields will be modified.
   */
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);

  /**
   * DeleteUser removes a user from the system.
   *
   * This is a soft delete - the user is marked as inactive
   * rather than being completely removed from the database.
   */
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);

  /**
   * ListUsers returns a paginated list of users.
   *
   * Supports filtering by role and active status.
   * Results are sorted by creation date (newest first).
   */
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}
