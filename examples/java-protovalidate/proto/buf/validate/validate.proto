// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.validate;

import "google/protobuf/descriptor.proto";

option java_package = "build.buf.validate";
option java_multiple_files = true;

// Validation constraints that can be applied to messages and fields
extend google.protobuf.FieldOptions {
  FieldConstraints field = 1071;
}

extend google.protobuf.MessageOptions {
  MessageConstraints message = 1071;
}

// Message-level validation constraints
message MessageConstraints {
  // CEL expression for message validation
  repeated string cel = 1;
}

// Field-level validation constraints
message FieldConstraints {
  // CEL expression for field validation
  repeated string cel = 1;
  
  // String constraints
  StringRules string = 17;
  
  // Numeric constraints  
  Int32Rules int32 = 5;
  Int64Rules int64 = 6;
  FloatRules float = 11;
  DoubleRules double = 12;
  
  // Boolean constraints
  BoolRules bool = 14;
  
  // Repeated field constraints
  RepeatedRules repeated = 18;
}

// String validation rules
message StringRules {
  optional uint64 min_len = 1;
  optional uint64 max_len = 2;
  optional string pattern = 3;
}

// Int32 validation rules
message Int32Rules {
  optional int32 const = 1;
  optional int32 lt = 2;
  optional int32 lte = 3;
  optional int32 gt = 4;
  optional int32 gte = 5;
  repeated int32 in = 6;
  repeated int32 not_in = 7;
}

// Int64 validation rules
message Int64Rules {
  optional int64 const = 1;
  optional int64 lt = 2;
  optional int64 lte = 3;
  optional int64 gt = 4;
  optional int64 gte = 5;
  repeated int64 in = 6;
  repeated int64 not_in = 7;
}

// Float validation rules
message FloatRules {
  optional float const = 1;
  optional float lt = 2;
  optional float lte = 3;
  optional float gt = 4;
  optional float gte = 5;
  repeated float in = 6;
  repeated float not_in = 7;
}

// Double validation rules
message DoubleRules {
  optional double const = 1;
  optional double lt = 2;
  optional double lte = 3;
  optional double gt = 4;
  optional double gte = 5;
  repeated double in = 6;
  repeated double not_in = 7;
}

// Boolean validation rules
message BoolRules {
  optional bool const = 1;
}

// Repeated field validation rules
message RepeatedRules {
  optional uint64 min_items = 1;
  optional uint64 max_items = 2;
  optional bool unique = 3;
}