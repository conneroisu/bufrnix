package com.example.grpc;

// Note: This is a conceptual example showing Java gRPC structure
// In a real implementation, gRPC stubs would be generated by protoc-gen-grpc-java
// For demonstration, this shows how the message types would be used

import com.example.grpc.v1.HelloRequest;
import com.example.grpc.v1.HelloResponse;

import java.util.logging.Logger;

public class GreeterClient {
    private static final Logger logger = Logger.getLogger(GreeterClient.class.getName());
    
    public static void main(String[] args) {
        logger.info("Java gRPC Client Example (Conceptual)");
        logger.info("This demonstrates the structure of a gRPC client using generated Java classes");
        
        // Demonstrate different types of requests
        logger.info("");
        logger.info("=== Unary Request Example ===");
        HelloRequest unaryRequest = HelloRequest.newBuilder()
            .setName("Alice")
            .build();
        logger.info("Created unary request for: " + unaryRequest.getName());
        
        logger.info("");
        logger.info("=== Request with Title Example ===");
        HelloRequest titleRequest = HelloRequest.newBuilder()
            .setName("Smith")
            .setTitle("Dr.")
            .build();
        logger.info("Created request for: " + titleRequest.getTitle() + " " + titleRequest.getName());
        
        logger.info("");
        logger.info("=== Response Processing Example ===");
        HelloResponse response = HelloResponse.newBuilder()
            .setMessage("Hello " + titleRequest.getTitle() + " " + titleRequest.getName())
            .setTimestamp(System.currentTimeMillis())
            .build();
        
        logger.info("Response message: " + response.getMessage());
        logger.info("Response timestamp: " + response.getTimestamp());
        
        // Demonstrate serialization for network transport
        logger.info("");
        logger.info("=== Serialization Example ===");
        byte[] requestBytes = unaryRequest.toByteArray();
        byte[] responseBytes = response.toByteArray();
        
        logger.info("Serialized request size: " + requestBytes.length + " bytes");
        logger.info("Serialized response size: " + responseBytes.length + " bytes");
        
        try {
            // Demonstrate deserialization
            HelloRequest parsedRequest = HelloRequest.parseFrom(requestBytes);
            HelloResponse parsedResponse = HelloResponse.parseFrom(responseBytes);
            
            logger.info("Successfully parsed request: " + parsedRequest.getName());
            logger.info("Successfully parsed response: " + parsedResponse.getMessage());
        } catch (Exception e) {
            logger.severe("Error during parsing: " + e.getMessage());
        }
        
        logger.info("");
        logger.info("In a real gRPC implementation:");
        logger.info("1. protoc-gen-grpc-java would generate client stubs");
        logger.info("2. Client would use GreeterServiceBlockingStub for synchronous calls");
        logger.info("3. Client would use GreeterServiceStub for asynchronous calls");
        logger.info("4. Client would establish ManagedChannel to server");
        logger.info("5. All four gRPC patterns would be supported:");
        logger.info("   - channel.sayHello(request) for unary calls");
        logger.info("   - channel.sayHelloStream(request) for server streaming");
        logger.info("   - channel.sayHelloClientStream(responseObserver) for client streaming");
        logger.info("   - channel.sayHelloBidirectional(responseObserver) for bidirectional");
    }
}