// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: example/v1/greeter.proto
#ifndef GRPC_example_2fv1_2fgreeter_2eproto__INCLUDED
#define GRPC_example_2fv1_2fgreeter_2eproto__INCLUDED

#include "example/v1/greeter.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace example {
namespace v1 {

// The greeting service definition
class GreeterService final {
 public:
  static constexpr char const* service_full_name() {
    return "example.v1.GreeterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::example::v1::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::example::v1::HelloResponse>> AsyncSayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::example::v1::HelloResponse>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::example::v1::HelloResponse>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::example::v1::HelloResponse>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    // Sends multiple greetings (server streaming)
    std::unique_ptr< ::grpc::ClientReaderInterface< ::example::v1::HelloResponse>> SayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::example::v1::HelloResponse>>(SayHelloStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::example::v1::HelloResponse>> AsyncSayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::example::v1::HelloResponse>>(AsyncSayHelloStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::example::v1::HelloResponse>> PrepareAsyncSayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::example::v1::HelloResponse>>(PrepareAsyncSayHelloStreamRaw(context, request, cq));
    }
    // Receives multiple requests (client streaming)
    std::unique_ptr< ::grpc::ClientWriterInterface< ::example::v1::HelloRequest>> SayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::example::v1::HelloRequest>>(SayHelloClientStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::example::v1::HelloRequest>> AsyncSayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::example::v1::HelloRequest>>(AsyncSayHelloClientStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::example::v1::HelloRequest>> PrepareAsyncSayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::example::v1::HelloRequest>>(PrepareAsyncSayHelloClientStreamRaw(context, response, cq));
    }
    // Bidirectional streaming
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>> SayHelloBidi(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>>(SayHelloBidiRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>> AsyncSayHelloBidi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>>(AsyncSayHelloBidiRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>> PrepareAsyncSayHelloBidi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>>(PrepareAsyncSayHelloBidiRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a greeting
      virtual void SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sends multiple greetings (server streaming)
      virtual void SayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::grpc::ClientReadReactor< ::example::v1::HelloResponse>* reactor) = 0;
      // Receives multiple requests (client streaming)
      virtual void SayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::ClientWriteReactor< ::example::v1::HelloRequest>* reactor) = 0;
      // Bidirectional streaming
      virtual void SayHelloBidi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::example::v1::HelloRequest,::example::v1::HelloResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::example::v1::HelloResponse>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::example::v1::HelloResponse>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::example::v1::HelloResponse>* SayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::example::v1::HelloResponse>* AsyncSayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::example::v1::HelloResponse>* PrepareAsyncSayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::example::v1::HelloRequest>* SayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::example::v1::HelloRequest>* AsyncSayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::example::v1::HelloRequest>* PrepareAsyncSayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* SayHelloBidiRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* AsyncSayHelloBidiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* PrepareAsyncSayHelloBidiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::example::v1::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::example::v1::HelloResponse>> AsyncSayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::example::v1::HelloResponse>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::example::v1::HelloResponse>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::example::v1::HelloResponse>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::example::v1::HelloResponse>> SayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::example::v1::HelloResponse>>(SayHelloStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::example::v1::HelloResponse>> AsyncSayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::example::v1::HelloResponse>>(AsyncSayHelloStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::example::v1::HelloResponse>> PrepareAsyncSayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::example::v1::HelloResponse>>(PrepareAsyncSayHelloStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::example::v1::HelloRequest>> SayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::example::v1::HelloRequest>>(SayHelloClientStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::example::v1::HelloRequest>> AsyncSayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::example::v1::HelloRequest>>(AsyncSayHelloClientStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::example::v1::HelloRequest>> PrepareAsyncSayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::example::v1::HelloRequest>>(PrepareAsyncSayHelloClientStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>> SayHelloBidi(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>>(SayHelloBidiRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>> AsyncSayHelloBidi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>>(AsyncSayHelloBidiRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>> PrepareAsyncSayHelloBidi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>>(PrepareAsyncSayHelloBidiRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::grpc::ClientReadReactor< ::example::v1::HelloResponse>* reactor) override;
      void SayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::ClientWriteReactor< ::example::v1::HelloRequest>* reactor) override;
      void SayHelloBidi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::example::v1::HelloRequest,::example::v1::HelloResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::example::v1::HelloResponse>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::example::v1::HelloResponse>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::example::v1::HelloResponse>* SayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request) override;
    ::grpc::ClientAsyncReader< ::example::v1::HelloResponse>* AsyncSayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::example::v1::HelloResponse>* PrepareAsyncSayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::example::v1::HelloRequest>* SayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response) override;
    ::grpc::ClientAsyncWriter< ::example::v1::HelloRequest>* AsyncSayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::example::v1::HelloRequest>* PrepareAsyncSayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* SayHelloBidiRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* AsyncSayHelloBidiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* PrepareAsyncSayHelloBidiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_SayHelloStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SayHelloClientStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SayHelloBidi_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response);
    // Sends multiple greetings (server streaming)
    virtual ::grpc::Status SayHelloStream(::grpc::ServerContext* context, const ::example::v1::HelloRequest* request, ::grpc::ServerWriter< ::example::v1::HelloResponse>* writer);
    // Receives multiple requests (client streaming)
    virtual ::grpc::Status SayHelloClientStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::example::v1::HelloRequest>* reader, ::example::v1::HelloResponse* response);
    // Bidirectional streaming
    virtual ::grpc::Status SayHelloBidi(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::example::v1::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::example::v1::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHelloStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SayHelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStream(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::grpc::ServerWriter< ::example::v1::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloStream(::grpc::ServerContext* context, ::example::v1::HelloRequest* request, ::grpc::ServerAsyncWriter< ::example::v1::HelloResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHelloClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHelloClientStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SayHelloClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::example::v1::HelloRequest>* /*reader*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloClientStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHelloBidi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHelloBidi() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SayHelloBidi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloBidi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloBidi(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_SayHelloStream<WithAsyncMethod_SayHelloClientStream<WithAsyncMethod_SayHelloBidi<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::MessageAllocator< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::example::v1::HelloRequest, ::example::v1::HelloResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::example::v1::HelloResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SayHelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHelloStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::example::v1::HelloRequest* request) { return this->SayHelloStream(context, request); }));
    }
    ~WithCallbackMethod_SayHelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStream(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::grpc::ServerWriter< ::example::v1::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::example::v1::HelloResponse>* SayHelloStream(
      ::grpc::CallbackServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SayHelloClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHelloClientStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::example::v1::HelloResponse* response) { return this->SayHelloClientStream(context, response); }));
    }
    ~WithCallbackMethod_SayHelloClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::example::v1::HelloRequest>* /*reader*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::example::v1::HelloRequest>* SayHelloClientStream(
      ::grpc::CallbackServerContext* /*context*/, ::example::v1::HelloResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SayHelloBidi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHelloBidi() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SayHelloBidi(context); }));
    }
    ~WithCallbackMethod_SayHelloBidi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloBidi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* SayHelloBidi(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SayHello<WithCallbackMethod_SayHelloStream<WithCallbackMethod_SayHelloClientStream<WithCallbackMethod_SayHelloBidi<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SayHelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHelloStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SayHelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStream(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::grpc::ServerWriter< ::example::v1::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SayHelloClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHelloClientStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SayHelloClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::example::v1::HelloRequest>* /*reader*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SayHelloBidi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHelloBidi() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SayHelloBidi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloBidi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHelloStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SayHelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStream(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::grpc::ServerWriter< ::example::v1::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHelloClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHelloClientStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SayHelloClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::example::v1::HelloRequest>* /*reader*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloClientStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHelloBidi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHelloBidi() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SayHelloBidi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloBidi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloBidi(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~WithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHelloStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SayHelloStream(context, request); }));
    }
    ~WithRawCallbackMethod_SayHelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStream(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::grpc::ServerWriter< ::example::v1::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SayHelloStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHelloClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHelloClientStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SayHelloClientStream(context, response); }));
    }
    ~WithRawCallbackMethod_SayHelloClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::example::v1::HelloRequest>* /*reader*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SayHelloClientStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHelloBidi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHelloBidi() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SayHelloBidi(context); }));
    }
    ~WithRawCallbackMethod_SayHelloBidi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloBidi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SayHelloBidi(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::example::v1::HelloRequest, ::example::v1::HelloResponse>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::example::v1::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::example::v1::HelloRequest,::example::v1::HelloResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SayHelloStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SayHelloStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::example::v1::HelloRequest, ::example::v1::HelloResponse>* streamer) {
                       return this->StreamedSayHelloStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SayHelloStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHelloStream(::grpc::ServerContext* /*context*/, const ::example::v1::HelloRequest* /*request*/, ::grpc::ServerWriter< ::example::v1::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSayHelloStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::example::v1::HelloRequest,::example::v1::HelloResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SayHelloStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithSplitStreamingMethod_SayHelloStream<Service > > StreamedService;
};

}  // namespace v1
}  // namespace example


#endif  // GRPC_example_2fv1_2fgreeter_2eproto__INCLUDED
