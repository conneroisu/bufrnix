// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: example/v1/greeter.proto

#include "example/v1/greeter.pb.h"
#include "example/v1/greeter.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace example {
namespace v1 {

static const char* GreeterService_method_names[] = {
  "/example.v1.GreeterService/SayHello",
  "/example.v1.GreeterService/SayHelloStream",
  "/example.v1.GreeterService/SayHelloClientStream",
  "/example.v1.GreeterService/SayHelloBidi",
};

std::unique_ptr< GreeterService::Stub> GreeterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GreeterService::Stub> stub(new GreeterService::Stub(channel, options));
  return stub;
}

GreeterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SayHello_(GreeterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayHelloStream_(GreeterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SayHelloClientStream_(GreeterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SayHelloBidi_(GreeterService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status GreeterService::Stub::SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::example::v1::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::example::v1::HelloRequest, ::example::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void GreeterService::Stub::async::SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::example::v1::HelloRequest, ::example::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void GreeterService::Stub::async::SayHello(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::example::v1::HelloResponse>* GreeterService::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::example::v1::HelloResponse, ::example::v1::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::example::v1::HelloResponse>* GreeterService::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::example::v1::HelloResponse>* GreeterService::Stub::SayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::example::v1::HelloResponse>::Create(channel_.get(), rpcmethod_SayHelloStream_, context, request);
}

void GreeterService::Stub::async::SayHelloStream(::grpc::ClientContext* context, const ::example::v1::HelloRequest* request, ::grpc::ClientReadReactor< ::example::v1::HelloResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::example::v1::HelloResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SayHelloStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::example::v1::HelloResponse>* GreeterService::Stub::AsyncSayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::example::v1::HelloResponse>::Create(channel_.get(), cq, rpcmethod_SayHelloStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::example::v1::HelloResponse>* GreeterService::Stub::PrepareAsyncSayHelloStreamRaw(::grpc::ClientContext* context, const ::example::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::example::v1::HelloResponse>::Create(channel_.get(), cq, rpcmethod_SayHelloStream_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::example::v1::HelloRequest>* GreeterService::Stub::SayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::example::v1::HelloRequest>::Create(channel_.get(), rpcmethod_SayHelloClientStream_, context, response);
}

void GreeterService::Stub::async::SayHelloClientStream(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::ClientWriteReactor< ::example::v1::HelloRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::example::v1::HelloRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_SayHelloClientStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::example::v1::HelloRequest>* GreeterService::Stub::AsyncSayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::example::v1::HelloRequest>::Create(channel_.get(), cq, rpcmethod_SayHelloClientStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::example::v1::HelloRequest>* GreeterService::Stub::PrepareAsyncSayHelloClientStreamRaw(::grpc::ClientContext* context, ::example::v1::HelloResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::example::v1::HelloRequest>::Create(channel_.get(), cq, rpcmethod_SayHelloClientStream_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* GreeterService::Stub::SayHelloBidiRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::example::v1::HelloRequest, ::example::v1::HelloResponse>::Create(channel_.get(), rpcmethod_SayHelloBidi_, context);
}

void GreeterService::Stub::async::SayHelloBidi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::example::v1::HelloRequest,::example::v1::HelloResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::example::v1::HelloRequest,::example::v1::HelloResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SayHelloBidi_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* GreeterService::Stub::AsyncSayHelloBidiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::example::v1::HelloRequest, ::example::v1::HelloResponse>::Create(channel_.get(), cq, rpcmethod_SayHelloBidi_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::example::v1::HelloRequest, ::example::v1::HelloResponse>* GreeterService::Stub::PrepareAsyncSayHelloBidiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::example::v1::HelloRequest, ::example::v1::HelloResponse>::Create(channel_.get(), cq, rpcmethod_SayHelloBidi_, context, false, nullptr);
}

GreeterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GreeterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GreeterService::Service, ::example::v1::HelloRequest, ::example::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GreeterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::example::v1::HelloRequest* req,
             ::example::v1::HelloResponse* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GreeterService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GreeterService::Service, ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
          [](GreeterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::example::v1::HelloRequest* req,
             ::grpc::ServerWriter<::example::v1::HelloResponse>* writer) {
               return service->SayHelloStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GreeterService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< GreeterService::Service, ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
          [](GreeterService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::example::v1::HelloRequest>* reader,
             ::example::v1::HelloResponse* resp) {
               return service->SayHelloClientStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GreeterService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< GreeterService::Service, ::example::v1::HelloRequest, ::example::v1::HelloResponse>(
          [](GreeterService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::example::v1::HelloResponse,
             ::example::v1::HelloRequest>* stream) {
               return service->SayHelloBidi(ctx, stream);
             }, this)));
}

GreeterService::Service::~Service() {
}

::grpc::Status GreeterService::Service::SayHello(::grpc::ServerContext* context, const ::example::v1::HelloRequest* request, ::example::v1::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GreeterService::Service::SayHelloStream(::grpc::ServerContext* context, const ::example::v1::HelloRequest* request, ::grpc::ServerWriter< ::example::v1::HelloResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GreeterService::Service::SayHelloClientStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::example::v1::HelloRequest>* reader, ::example::v1::HelloResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GreeterService::Service::SayHelloBidi(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::example::v1::HelloResponse, ::example::v1::HelloRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace example
}  // namespace v1

