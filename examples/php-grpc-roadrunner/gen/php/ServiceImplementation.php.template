<?php
/**
 * Example RoadRunner gRPC Service Implementation
 * Generated by Bufrnix
 */
namespace App\Services;

use \ExampleRequest;
use \ExampleResponse;
use \Services\ExampleServiceInterface;
use Spiral\RoadRunner\GRPC\ContextInterface;

class ExampleService implements ExampleServiceInterface
{
    /**
     * Example unary RPC method
     */
    public function processRequest(
        ContextInterface $ctx,
        ExampleRequest $request
    ): ExampleResponse {
        // Access context values
        $metadata = $ctx->getValue('metadata');

        // Process the request
        $result = $this->handleBusinessLogic($request);

        // Create and return response
        $response = new ExampleResponse();
        $response->setResult($result);

        return $response;
    }

    /**
     * Example server streaming RPC
     */
    public function streamData(
        ContextInterface $ctx,
        ExampleRequest $request
    ): \Generator {
        // Stream multiple responses
        for ($i = 0; $i < 10; $i++) {
            $response = new ExampleResponse();
            $response->setResult("Stream item $i");

            yield $response;

            // Simulate work
            usleep(100000); // 100ms
        }
    }

    /**
     * Example bidirectional streaming RPC
     */
    public function bidirectionalStream(
        ContextInterface $ctx,
        \Iterator $requests
    ): \Generator {
        foreach ($requests as $request) {
            // Process each incoming request
            $response = new ExampleResponse();
            $response->setResult("Echo: " . $request->getData());

            yield $response;
        }
    }

    private function handleBusinessLogic(ExampleRequest $request): string
    {
        // Your business logic here
        return "Processed: " . $request->getData();
    }
}
