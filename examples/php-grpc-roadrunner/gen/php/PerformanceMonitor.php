<?php
/**
 * RoadRunner Performance Monitor
 * Generated by Bufrnix
 */
namespace \RoadRunner;

use Spiral\RoadRunner\GRPC\ContextInterface;

class PerformanceMonitor
{
    private array $metrics = [];

    /**
     * Start timing a request
     */
    public function startTimer(string $method): float
    {
        $startTime = microtime(true);
        $this->metrics[$method]['count'] = ($this->metrics[$method]['count'] ?? 0) + 1;

        return $startTime;
    }

    /**
     * End timing and record metrics
     */
    public function endTimer(string $method, float $startTime): void
    {
        $duration = microtime(true) - $startTime;

        if (!isset($this->metrics[$method]['total'])) {
            $this->metrics[$method]['total'] = 0;
            $this->metrics[$method]['min'] = PHP_FLOAT_MAX;
            $this->metrics[$method]['max'] = 0;
        }

        $this->metrics[$method]['total'] += $duration;
        $this->metrics[$method]['min'] = min($this->metrics[$method]['min'], $duration);
        $this->metrics[$method]['max'] = max($this->metrics[$method]['max'], $duration);
        $this->metrics[$method]['avg'] = $this->metrics[$method]['total'] / $this->metrics[$method]['count'];
    }

    /**
     * Get performance metrics
     */
    public function getMetrics(): array
    {
        return $this->metrics;
    }

    /**
     * Reset metrics
     */
    public function reset(): void
    {
        $this->metrics = [];
    }

    /**
     * Create a monitoring wrapper for services
     */
    public function wrapService(object $service): object
    {
        return new class($service, $this) {
            private $service;
            private $monitor;

            public function __construct($service, $monitor)
            {
                $this->service = $service;
                $this->monitor = $monitor;
            }

            public function __call($method, $args)
            {
                $timer = $this->monitor->startTimer($method);

                try {
                    $result = $this->service->$method(...$args);
                    $this->monitor->endTimer($method, $timer);
                    return $result;
                } catch (\Throwable $e) {
                    $this->monitor->endTimer($method, $timer);
                    throw $e;
                }
            }
        };
    }
}
