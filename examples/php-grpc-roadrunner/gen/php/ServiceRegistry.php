<?php
/**
 * RoadRunner Service Registry Helper
 * Generated by Bufrnix
 */
namespace \RoadRunner;

use Spiral\RoadRunner\GRPC\Server;

class ServiceRegistry
{
    private Server $server;
    private array $services = [];

    public function __construct(Server $server)
    {
        $this->server = $server;
    }

    /**
     * Register a service implementation
     */
    public function register(string $interface, object $implementation): self
    {
        $this->services[$interface] = $implementation;
        $this->server->registerService($interface, $implementation);

        return $this;
    }

    /**
     * Register multiple services at once
     */
    public function registerAll(array $services): self
    {
        foreach ($services as $interface => $implementation) {
            $this->register($interface, $implementation);
        }

        return $this;
    }

    /**
     * Get registered services
     */
    public function getServices(): array
    {
        return $this->services;
    }

    /**
     * Create from service definitions
     */
    public static function fromDefinitions(Server $server, array $definitions): self
    {
        $registry = new self($server);

        foreach ($definitions as $interface => $implementationClass) {
            if (is_string($implementationClass)) {
                $implementation = new $implementationClass();
            } else {
                $implementation = $implementationClass;
            }

            $registry->register($interface, $implementation);
        }

        return $registry;
    }
}
