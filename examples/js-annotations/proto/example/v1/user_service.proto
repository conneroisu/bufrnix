syntax = "proto3";

package example.v1;

import "google/api/annotations.proto";

// UserService demonstrates TypeScript generation with Google API annotations.
// This service shows how Connect-ES can generate both gRPC and REST API clients
// from the same protobuf definition using HTTP annotations.
service UserService {
  // GetUser retrieves a user by their unique ID.
  // HTTP: GET /api/v1/users/{user_id}
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}"
    };
  }

  // ListUsers retrieves a paginated list of users with optional filtering.
  // HTTP: GET /api/v1/users?page_size=10&page_token=abc&status=ACTIVE
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
  }

  // CreateUser creates a new user in the system.
  // HTTP: POST /api/v1/users with JSON body
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/users"
      body: "user"
    };
  }

  // UpdateUser updates an existing user's information.
  // HTTP: PUT /api/v1/users/{user.id} with JSON body
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/api/v1/users/{user.id}"
      body: "user"
    };
  }

  // DeleteUser removes a user from the system.
  // HTTP: DELETE /api/v1/users/{user_id}
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/api/v1/users/{user_id}"
    };
  }

  // BatchGetUsers retrieves multiple users by their IDs in a single request.
  // HTTP: POST /api/v1/users:batchGet with JSON body containing user IDs
  rpc BatchGetUsers(BatchGetUsersRequest) returns (BatchGetUsersResponse) {
    option (google.api.http) = {
      post: "/api/v1/users:batchGet"
      body: "*"
    };
  }
}

// User represents a user in the system with comprehensive information.
message User {
  // Unique identifier for the user
  string id = 1;

  // User's email address (must be unique)
  string email = 2;

  // User's display name
  string name = 3;

  // User's current status in the system
  UserStatus status = 4;

  // User's profile information
  UserProfile profile = 5;

  // User roles and permissions
  repeated string roles = 6;

  // Additional metadata as key-value pairs
  map<string, string> metadata = 7;

  // Timestamps for audit purposes
  int64 created_at = 8;
  int64 updated_at = 9;
}

// UserProfile contains detailed profile information for a user.
message UserProfile {
  // User's first name
  string first_name = 1;

  // User's last name
  string last_name = 2;

  // User's biography or description
  string bio = 3;

  // URL to user's avatar image
  string avatar_url = 4;

  // User's location or address
  string location = 5;

  // User's time zone
  string timezone = 6;

  // User's language preference
  string language = 7;

  // User's interests or tags
  repeated string interests = 8;
}

// UserStatus enum defines the possible states of a user account.
enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;
  USER_STATUS_INACTIVE = 2;
  USER_STATUS_SUSPENDED = 3;
  USER_STATUS_PENDING = 4;
}

// Request message for GetUser RPC
message GetUserRequest {
  // The unique identifier of the user to retrieve
  string user_id = 1;

  // Optional: specify which fields to return (field mask)
  repeated string fields = 2;
}

// Response message for GetUser RPC
message GetUserResponse {
  // The requested user
  User user = 1;
}

// Request message for ListUsers RPC
message ListUsersRequest {
  // Maximum number of users to return (default: 50, max: 1000)
  int32 page_size = 1;

  // Token for pagination (from previous response)
  string page_token = 2;

  // Filter by user status
  UserStatus status = 3;

  // Filter by user roles
  repeated string roles = 4;

  // Search query for name or email
  string query = 5;

  // Sort order (created_at, updated_at, name, email)
  string order_by = 6;
}

// Response message for ListUsers RPC
message ListUsersResponse {
  // List of users matching the request criteria
  repeated User users = 1;

  // Token for next page (empty if no more pages)
  string next_page_token = 2;

  // Total count of users (may be approximate for large datasets)
  int64 total_count = 3;
}

// Request message for CreateUser RPC
message CreateUserRequest {
  // The user to create (ID will be generated)
  User user = 1;

  // Optional: password for the user (handled separately in real systems)
  string password = 2;

  // Whether to send a welcome email
  bool send_welcome_email = 3;
}

// Response message for CreateUser RPC
message CreateUserResponse {
  // The created user with generated ID and timestamps
  User user = 1;
}

// Request message for UpdateUser RPC
message UpdateUserRequest {
  // The user to update (must include ID)
  User user = 1;

  // Field mask specifying which fields to update
  repeated string update_mask = 2;
}

// Response message for UpdateUser RPC
message UpdateUserResponse {
  // The updated user
  User user = 1;
}

// Request message for DeleteUser RPC
message DeleteUserRequest {
  // The unique identifier of the user to delete
  string user_id = 1;

  // Whether to perform soft delete (default: false)
  bool soft_delete = 2;
}

// Response message for DeleteUser RPC
message DeleteUserResponse {
  // Confirmation message
  string message = 1;

  // Whether the deletion was successful
  bool success = 2;
}

// Request message for BatchGetUsers RPC
message BatchGetUsersRequest {
  // List of user IDs to retrieve
  repeated string user_ids = 1;

  // Optional: specify which fields to return for each user
  repeated string fields = 2;
}

// Response message for BatchGetUsers RPC
message BatchGetUsersResponse {
  // Map of user_id to User (missing users are omitted)
  map<string, User> users = 1;

  // List of user IDs that were not found
  repeated string not_found = 2;
}