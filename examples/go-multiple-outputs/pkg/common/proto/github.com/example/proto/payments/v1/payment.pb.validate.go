// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payments/v1/payment.proto

package paymentsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PaymentMultiError, or nil if none found.
func (m *Payment) ValidateAll() error {
	return m.validate(true)
}

func (m *Payment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrderId

	// no validation rules for CustomerId

	// no validation rules for AmountCents

	// no validation rules for Currency

	if all {
		switch v := interface{}(m.GetMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "Method",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "Method",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "Method",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for ProcessorTransactionId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProcessedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "ProcessedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return PaymentMultiError(errors)
	}

	return nil
}

// PaymentMultiError is an error wrapping multiple validation errors returned
// by Payment.ValidateAll() if the designated constraints aren't met.
type PaymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMultiError) AllErrors() []error { return m }

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on PaymentMethod with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethod with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentMethodMultiError, or
// nil if none found.
func (m *PaymentMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMethodValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMethodValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMethodValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBankAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMethodValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMethodValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMethodValidationError{
				field:  "BankAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDigitalWallet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMethodValidationError{
					field:  "DigitalWallet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMethodValidationError{
					field:  "DigitalWallet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDigitalWallet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMethodValidationError{
				field:  "DigitalWallet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentMethodMultiError(errors)
	}

	return nil
}

// PaymentMethodMultiError is an error wrapping multiple validation errors
// returned by PaymentMethod.ValidateAll() if the designated constraints
// aren't met.
type PaymentMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodMultiError) AllErrors() []error { return m }

// PaymentMethodValidationError is the validation error returned by
// PaymentMethod.Validate if the designated constraints aren't met.
type PaymentMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodValidationError) ErrorName() string { return "PaymentMethodValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodValidationError{}

// Validate checks the field values on CardDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardDetailsMultiError, or
// nil if none found.
func (m *CardDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *CardDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastFour

	// no validation rules for Brand

	// no validation rules for ExpMonth

	// no validation rules for ExpYear

	// no validation rules for CardholderName

	if len(errors) > 0 {
		return CardDetailsMultiError(errors)
	}

	return nil
}

// CardDetailsMultiError is an error wrapping multiple validation errors
// returned by CardDetails.ValidateAll() if the designated constraints aren't met.
type CardDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardDetailsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardDetailsMultiError) AllErrors() []error { return m }

// CardDetailsValidationError is the validation error returned by
// CardDetails.Validate if the designated constraints aren't met.
type CardDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardDetailsValidationError) ErrorName() string { return "CardDetailsValidationError" }

// Error satisfies the builtin error interface
func (e CardDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardDetailsValidationError{}

// Validate checks the field values on BankAccountDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BankAccountDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BankAccountDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BankAccountDetailsMultiError, or nil if none found.
func (m *BankAccountDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *BankAccountDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BankName

	// no validation rules for AccountHolderName

	// no validation rules for AccountLastFour

	// no validation rules for RoutingNumberMasked

	if len(errors) > 0 {
		return BankAccountDetailsMultiError(errors)
	}

	return nil
}

// BankAccountDetailsMultiError is an error wrapping multiple validation errors
// returned by BankAccountDetails.ValidateAll() if the designated constraints
// aren't met.
type BankAccountDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BankAccountDetailsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BankAccountDetailsMultiError) AllErrors() []error { return m }

// BankAccountDetailsValidationError is the validation error returned by
// BankAccountDetails.Validate if the designated constraints aren't met.
type BankAccountDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankAccountDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankAccountDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankAccountDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankAccountDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankAccountDetailsValidationError) ErrorName() string {
	return "BankAccountDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e BankAccountDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBankAccountDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankAccountDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankAccountDetailsValidationError{}

// Validate checks the field values on DigitalWalletDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DigitalWalletDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DigitalWalletDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DigitalWalletDetailsMultiError, or nil if none found.
func (m *DigitalWalletDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *DigitalWalletDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for AccountIdMasked

	if len(errors) > 0 {
		return DigitalWalletDetailsMultiError(errors)
	}

	return nil
}

// DigitalWalletDetailsMultiError is an error wrapping multiple validation
// errors returned by DigitalWalletDetails.ValidateAll() if the designated
// constraints aren't met.
type DigitalWalletDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DigitalWalletDetailsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DigitalWalletDetailsMultiError) AllErrors() []error { return m }

// DigitalWalletDetailsValidationError is the validation error returned by
// DigitalWalletDetails.Validate if the designated constraints aren't met.
type DigitalWalletDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DigitalWalletDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DigitalWalletDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DigitalWalletDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DigitalWalletDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DigitalWalletDetailsValidationError) ErrorName() string {
	return "DigitalWalletDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e DigitalWalletDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDigitalWalletDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DigitalWalletDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DigitalWalletDetailsValidationError{}

// Validate checks the field values on ProcessPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessPaymentRequestMultiError, or nil if none found.
func (m *ProcessPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for CustomerId

	// no validation rules for AmountCents

	// no validation rules for Currency

	if all {
		switch v := interface{}(m.GetPaymentMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessPaymentRequestValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessPaymentRequestValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessPaymentRequestValidationError{
				field:  "PaymentMethod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return ProcessPaymentRequestMultiError(errors)
	}

	return nil
}

// ProcessPaymentRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessPaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessPaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessPaymentRequestMultiError) AllErrors() []error { return m }

// ProcessPaymentRequestValidationError is the validation error returned by
// ProcessPaymentRequest.Validate if the designated constraints aren't met.
type ProcessPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessPaymentRequestValidationError) ErrorName() string {
	return "ProcessPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessPaymentRequestValidationError{}

// Validate checks the field values on ProcessPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessPaymentResponseMultiError, or nil if none found.
func (m *ProcessPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessPaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessPaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessPaymentResponseValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequiresAction

	// no validation rules for ActionUrl

	if len(errors) > 0 {
		return ProcessPaymentResponseMultiError(errors)
	}

	return nil
}

// ProcessPaymentResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessPaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessPaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessPaymentResponseMultiError) AllErrors() []error { return m }

// ProcessPaymentResponseValidationError is the validation error returned by
// ProcessPaymentResponse.Validate if the designated constraints aren't met.
type ProcessPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessPaymentResponseValidationError) ErrorName() string {
	return "ProcessPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessPaymentResponseValidationError{}

// Validate checks the field values on GetPaymentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentRequestMultiError, or nil if none found.
func (m *GetPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPaymentRequestMultiError(errors)
	}

	return nil
}

// GetPaymentRequestMultiError is an error wrapping multiple validation errors
// returned by GetPaymentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentRequestMultiError) AllErrors() []error { return m }

// GetPaymentRequestValidationError is the validation error returned by
// GetPaymentRequest.Validate if the designated constraints aren't met.
type GetPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentRequestValidationError) ErrorName() string {
	return "GetPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentRequestValidationError{}

// Validate checks the field values on GetPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentResponseMultiError, or nil if none found.
func (m *GetPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentResponseValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaymentResponseMultiError(errors)
	}

	return nil
}

// GetPaymentResponseMultiError is an error wrapping multiple validation errors
// returned by GetPaymentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentResponseMultiError) AllErrors() []error { return m }

// GetPaymentResponseValidationError is the validation error returned by
// GetPaymentResponse.Validate if the designated constraints aren't met.
type GetPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentResponseValidationError) ErrorName() string {
	return "GetPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentResponseValidationError{}

// Validate checks the field values on CapturePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CapturePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapturePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapturePaymentRequestMultiError, or nil if none found.
func (m *CapturePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CapturePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AmountCents

	if len(errors) > 0 {
		return CapturePaymentRequestMultiError(errors)
	}

	return nil
}

// CapturePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CapturePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CapturePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapturePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapturePaymentRequestMultiError) AllErrors() []error { return m }

// CapturePaymentRequestValidationError is the validation error returned by
// CapturePaymentRequest.Validate if the designated constraints aren't met.
type CapturePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapturePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapturePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapturePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapturePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapturePaymentRequestValidationError) ErrorName() string {
	return "CapturePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CapturePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapturePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapturePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapturePaymentRequestValidationError{}

// Validate checks the field values on CapturePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CapturePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapturePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapturePaymentResponseMultiError, or nil if none found.
func (m *CapturePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CapturePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CapturePaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CapturePaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CapturePaymentResponseValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CapturePaymentResponseMultiError(errors)
	}

	return nil
}

// CapturePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CapturePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CapturePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapturePaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapturePaymentResponseMultiError) AllErrors() []error { return m }

// CapturePaymentResponseValidationError is the validation error returned by
// CapturePaymentResponse.Validate if the designated constraints aren't met.
type CapturePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapturePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapturePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapturePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapturePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapturePaymentResponseValidationError) ErrorName() string {
	return "CapturePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CapturePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapturePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapturePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapturePaymentResponseValidationError{}

// Validate checks the field values on RefundPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundPaymentRequestMultiError, or nil if none found.
func (m *RefundPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AmountCents

	// no validation rules for Reason

	if len(errors) > 0 {
		return RefundPaymentRequestMultiError(errors)
	}

	return nil
}

// RefundPaymentRequestMultiError is an error wrapping multiple validation
// errors returned by RefundPaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type RefundPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundPaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundPaymentRequestMultiError) AllErrors() []error { return m }

// RefundPaymentRequestValidationError is the validation error returned by
// RefundPaymentRequest.Validate if the designated constraints aren't met.
type RefundPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundPaymentRequestValidationError) ErrorName() string {
	return "RefundPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundPaymentRequestValidationError{}

// Validate checks the field values on RefundPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundPaymentResponseMultiError, or nil if none found.
func (m *RefundPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefundPaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefundPaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefundPaymentResponseValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RefundId

	if len(errors) > 0 {
		return RefundPaymentResponseMultiError(errors)
	}

	return nil
}

// RefundPaymentResponseMultiError is an error wrapping multiple validation
// errors returned by RefundPaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type RefundPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundPaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundPaymentResponseMultiError) AllErrors() []error { return m }

// RefundPaymentResponseValidationError is the validation error returned by
// RefundPaymentResponse.Validate if the designated constraints aren't met.
type RefundPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundPaymentResponseValidationError) ErrorName() string {
	return "RefundPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefundPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundPaymentResponseValidationError{}

// Validate checks the field values on ListPaymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPaymentsRequestMultiError, or nil if none found.
func (m *ListPaymentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomerId

	// no validation rules for OrderId

	// no validation rules for StatusFilter

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListPaymentsRequestMultiError(errors)
	}

	return nil
}

// ListPaymentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPaymentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPaymentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentsRequestMultiError) AllErrors() []error { return m }

// ListPaymentsRequestValidationError is the validation error returned by
// ListPaymentsRequest.Validate if the designated constraints aren't met.
type ListPaymentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentsRequestValidationError) ErrorName() string {
	return "ListPaymentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentsRequestValidationError{}

// Validate checks the field values on ListPaymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPaymentsResponseMultiError, or nil if none found.
func (m *ListPaymentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPaymentsResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPaymentsResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPaymentsResponseValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListPaymentsResponseMultiError(errors)
	}

	return nil
}

// ListPaymentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPaymentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPaymentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentsResponseMultiError) AllErrors() []error { return m }

// ListPaymentsResponseValidationError is the validation error returned by
// ListPaymentsResponse.Validate if the designated constraints aren't met.
type ListPaymentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentsResponseValidationError) ErrorName() string {
	return "ListPaymentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentsResponseValidationError{}

// Validate checks the field values on GetPaymentStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentStatusRequestMultiError, or nil if none found.
func (m *GetPaymentStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPaymentStatusRequestMultiError(errors)
	}

	return nil
}

// GetPaymentStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetPaymentStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentStatusRequestMultiError) AllErrors() []error { return m }

// GetPaymentStatusRequestValidationError is the validation error returned by
// GetPaymentStatusRequest.Validate if the designated constraints aren't met.
type GetPaymentStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentStatusRequestValidationError) ErrorName() string {
	return "GetPaymentStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentStatusRequestValidationError{}

// Validate checks the field values on GetPaymentStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentStatusResponseMultiError, or nil if none found.
func (m *GetPaymentStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStatusUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentStatusResponseValidationError{
					field:  "StatusUpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentStatusResponseValidationError{
					field:  "StatusUpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentStatusResponseValidationError{
				field:  "StatusUpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaymentStatusResponseMultiError(errors)
	}

	return nil
}

// GetPaymentStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetPaymentStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentStatusResponseMultiError) AllErrors() []error { return m }

// GetPaymentStatusResponseValidationError is the validation error returned by
// GetPaymentStatusResponse.Validate if the designated constraints aren't met.
type GetPaymentStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentStatusResponseValidationError) ErrorName() string {
	return "GetPaymentStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentStatusResponseValidationError{}
