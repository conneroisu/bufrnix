# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: modern.proto
# plugin: python-betterproto
# This file has been @generated

__all__ = (
    "Product",
    "CreateProductRequest",
    "CreateProductResponse",
    "GetProductRequest",
    "GetProductResponse",
    "StreamProductsRequest",
    "ProductServiceStub",
    "ProductServiceBase",
)


from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Product(betterproto.Message):
    """ """

    id: str = betterproto.string_field(1)
    """
    
    """

    name: str = betterproto.string_field(2)
    """
    
    """

    description: str = betterproto.string_field(3)
    """
    
    """

    price: float = betterproto.double_field(4)
    """
    
    """

    categories: List[str] = betterproto.string_field(5)
    """
    
    """

    attributes: Dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """
    
    """

    created_at: datetime = betterproto.message_field(7)
    """
    
    """


@dataclass(eq=False, repr=False)
class CreateProductRequest(betterproto.Message):
    """ """

    product: "Product" = betterproto.message_field(1)
    """
    
    """


@dataclass(eq=False, repr=False)
class CreateProductResponse(betterproto.Message):
    """ """

    product: "Product" = betterproto.message_field(1)
    """
    
    """

    success: bool = betterproto.bool_field(2)
    """
    
    """


@dataclass(eq=False, repr=False)
class GetProductRequest(betterproto.Message):
    """ """

    product_id: str = betterproto.string_field(1)
    """
    
    """


@dataclass(eq=False, repr=False)
class GetProductResponse(betterproto.Message):
    """ """

    product: "Product" = betterproto.message_field(1)
    """
    
    """


@dataclass(eq=False, repr=False)
class StreamProductsRequest(betterproto.Message):
    """ """

    categories: List[str] = betterproto.string_field(1)
    """
    
    """


class ProductServiceStub(betterproto.ServiceStub):
    """ """

    async def create_product(
        self,
        create_product_request: "CreateProductRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "CreateProductResponse":
        """ """

        return await self._unary_unary(
            "/modern.ProductService/CreateProduct",
            create_product_request,
            CreateProductResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_product(
        self,
        get_product_request: "GetProductRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetProductResponse":
        """ """

        return await self._unary_unary(
            "/modern.ProductService/GetProduct",
            get_product_request,
            GetProductResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stream_products(
        self,
        stream_products_request: "StreamProductsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "AsyncIterator[Product]":
        """ """

        async for response in self._unary_stream(
            "/modern.ProductService/StreamProducts",
            stream_products_request,
            Product,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class ProductServiceBase(ServiceBase):
    """ """

    async def create_product(
        self, create_product_request: "CreateProductRequest"
    ) -> "CreateProductResponse":
        """ """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_product(
        self, get_product_request: "GetProductRequest"
    ) -> "GetProductResponse":
        """ """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_products(
        self, stream_products_request: "StreamProductsRequest"
    ) -> AsyncIterator[Product]:
        """ """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield Product()

    async def __rpc_create_product(
        self,
        stream: "grpclib.server.Stream[CreateProductRequest, CreateProductResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_product(request)
        await stream.send_message(response)

    async def __rpc_get_product(
        self, stream: "grpclib.server.Stream[GetProductRequest, GetProductResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_product(request)
        await stream.send_message(response)

    async def __rpc_stream_products(
        self, stream: "grpclib.server.Stream[StreamProductsRequest, Product]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.stream_products,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/modern.ProductService/CreateProduct": grpclib.const.Handler(
                self.__rpc_create_product,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateProductRequest,
                CreateProductResponse,
            ),
            "/modern.ProductService/GetProduct": grpclib.const.Handler(
                self.__rpc_get_product,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetProductRequest,
                GetProductResponse,
            ),
            "/modern.ProductService/StreamProducts": grpclib.const.Handler(
                self.__rpc_stream_products,
                grpclib.const.Cardinality.UNARY_STREAM,
                StreamProductsRequest,
                Product,
            ),
        }
