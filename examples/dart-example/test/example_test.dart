import 'package:test/test.dart';

// Generated protobuf imports (will be generated by bufrnix)
// import '../proto/gen/dart/example/v1/example.pb.dart';

void main() {
  group('Dart Protobuf Example Tests', () {
    // Uncomment these tests after protobuf generation
    /*
    test('should create and populate ExampleMessage', () {
      final timestamp = TimestampMessage()
        ..seconds = 1234567890
        ..nanos = 123456789;
        
      final example = ExampleMessage()
        ..id = 42
        ..name = 'Test User'
        ..email = 'test@example.com'
        ..tags.addAll(['test', 'protobuf', 'dart'])
        ..description = 'A test message'
        ..createdAt = timestamp;
      
      expect(example.id, equals(42));
      expect(example.name, equals('Test User'));
      expect(example.email, equals('test@example.com'));
      expect(example.tags, hasLength(3));
      expect(example.tags, contains('test'));
      expect(example.tags, contains('protobuf'));
      expect(example.tags, contains('dart'));
      expect(example.description, equals('A test message'));
      expect(example.createdAt.seconds, equals(1234567890));
      expect(example.createdAt.nanos, equals(123456789));
    });
    
    test('should serialize and deserialize ExampleMessage', () {
      final original = ExampleMessage()
        ..id = 1
        ..name = 'Serialization Test'
        ..email = 'serialize@example.com'
        ..tags.addAll(['serialize', 'test']);
      
      // Serialize to bytes
      final bytes = original.writeToBuffer();
      expect(bytes, isNotEmpty);
      
      // Deserialize from bytes
      final deserialized = ExampleMessage.fromBuffer(bytes);
      
      // Verify all fields are preserved
      expect(deserialized.id, equals(original.id));
      expect(deserialized.name, equals(original.name));
      expect(deserialized.email, equals(original.email));
      expect(deserialized.tags, equals(original.tags));
    });
    
    test('should handle optional fields correctly', () {
      // Create message without optional description
      final withoutDesc = ExampleMessage()
        ..id = 1
        ..name = 'No Description'
        ..email = 'nodesc@example.com';
      
      expect(withoutDesc.hasDescription(), isFalse);
      expect(withoutDesc.description, isEmpty);
      
      // Create message with optional description
      final withDesc = ExampleMessage()
        ..id = 2
        ..name = 'With Description'
        ..email = 'withdesc@example.com'
        ..description = 'This has a description';
      
      expect(withDesc.hasDescription(), isTrue);
      expect(withDesc.description, equals('This has a description'));
    });
    
    test('should create request/response messages', () {
      final example = ExampleMessage()
        ..id = 123
        ..name = 'Request Test'
        ..email = 'request@example.com';
      
      final createRequest = CreateExampleRequest()
        ..example = example;
      
      expect(createRequest.example.id, equals(123));
      expect(createRequest.example.name, equals('Request Test'));
      
      final createResponse = CreateExampleResponse()
        ..example = example
        ..success = true
        ..message = 'Created successfully';
      
      expect(createResponse.success, isTrue);
      expect(createResponse.message, equals('Created successfully'));
      
      final getRequest = GetExampleRequest()
        ..id = 123;
      
      expect(getRequest.id, equals(123));
      
      final listRequest = ListExamplesRequest()
        ..pageSize = 10
        ..pageToken = 'token123'
        ..filter = 'status:active';
      
      expect(listRequest.pageSize, equals(10));
      expect(listRequest.pageToken, equals('token123'));
      expect(listRequest.filter, equals('status:active'));
    });
    
    test('should handle repeated fields', () {
      final example = ExampleMessage()
        ..id = 1
        ..name = 'Repeated Test'
        ..email = 'repeated@example.com';
      
      // Start with empty tags
      expect(example.tags, isEmpty);
      
      // Add tags one by one
      example.tags.add('tag1');
      example.tags.add('tag2');
      example.tags.add('tag3');
      
      expect(example.tags, hasLength(3));
      expect(example.tags[0], equals('tag1'));
      expect(example.tags[1], equals('tag2'));
      expect(example.tags[2], equals('tag3'));
      
      // Add multiple tags at once
      example.tags.addAll(['tag4', 'tag5']);
      expect(example.tags, hasLength(5));
      
      // Clear all tags
      example.tags.clear();
      expect(example.tags, isEmpty);
    });
    
    test('should handle nested messages', () {
      final timestamp = TimestampMessage()
        ..seconds = 1609459200  // 2021-01-01 00:00:00 UTC
        ..nanos = 0;
      
      final example = ExampleMessage()
        ..id = 1
        ..name = 'Nested Test'
        ..email = 'nested@example.com'
        ..createdAt = timestamp;
      
      expect(example.createdAt.seconds, equals(1609459200));
      expect(example.createdAt.nanos, equals(0));
      
      // Test that nested message is properly copied
      final serialized = example.writeToBuffer();
      final deserialized = ExampleMessage.fromBuffer(serialized);
      
      expect(deserialized.createdAt.seconds, equals(1609459200));
      expect(deserialized.createdAt.nanos, equals(0));
    });
    */
    
    test('placeholder test - remove after protobuf generation', () {
      // This test ensures the test runner works before protobuf code is generated
      expect(true, isTrue);
      print('Protobuf code not yet generated. Run "nix build" first.');
    });
  });
}