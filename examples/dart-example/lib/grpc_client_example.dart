import 'dart:io';
import 'package:grpc/grpc.dart';

// Generated protobuf imports (will be generated by bufrnix)
// import 'proto/gen/dart/example/v1/example.pb.dart';
// import 'proto/gen/dart/example/v1/example.pbgrpc.dart';

/// Example gRPC client demonstrating the use of generated service stubs
class ExampleGrpcClient {
  late ClientChannel _channel;
  // late ExampleServiceClient _client;
  
  /// Initialize the gRPC client
  Future<void> connect({String host = 'localhost', int port = 50051}) async {
    _channel = ClientChannel(
      host,
      port: port,
      options: const ChannelOptions(credentials: ChannelCredentials.insecure()),
    );
    
    // _client = ExampleServiceClient(_channel);
    print('Connected to gRPC server at $host:$port');
  }
  
  /// Close the gRPC connection
  Future<void> disconnect() async {
    await _channel.shutdown();
    print('Disconnected from gRPC server');
  }
  
  // Uncomment these methods after protobuf generation
  /*
  /// Create a new example
  Future<CreateExampleResponse> createExample(ExampleMessage example) async {
    final request = CreateExampleRequest()..example = example;
    
    try {
      final response = await _client.createExample(request);
      print('Created example with ID: ${response.example.id}');
      return response;
    } catch (e) {
      print('Error creating example: $e');
      rethrow;
    }
  }
  
  /// Get an example by ID
  Future<GetExampleResponse> getExample(int id) async {
    final request = GetExampleRequest()..id = id;
    
    try {
      final response = await _client.getExample(request);
      if (response.found) {
        print('Found example: ${response.example.name}');
      } else {
        print('Example with ID $id not found');
      }
      return response;
    } catch (e) {
      print('Error getting example: $e');
      rethrow;
    }
  }
  
  /// List examples with pagination
  Future<ListExamplesResponse> listExamples({
    int pageSize = 10,
    String pageToken = '',
    String filter = '',
  }) async {
    final request = ListExamplesRequest()
      ..pageSize = pageSize
      ..pageToken = pageToken
      ..filter = filter;
    
    try {
      final response = await _client.listExamples(request);
      print('Found ${response.examples.length} examples (total: ${response.totalCount})');
      return response;
    } catch (e) {
      print('Error listing examples: $e');
      rethrow;
    }
  }
  
  /// Delete an example
  Future<DeleteExampleResponse> deleteExample(int id) async {
    final request = DeleteExampleRequest()..id = id;
    
    try {
      final response = await _client.deleteExample(request);
      if (response.success) {
        print('Successfully deleted example with ID: $id');
      } else {
        print('Failed to delete example: ${response.message}');
      }
      return response;
    } catch (e) {
      print('Error deleting example: $e');
      rethrow;
    }
  }
  
  /// Watch for example updates (streaming)
  Stream<ExampleMessage> watchExamples({
    int pageSize = 10,
    String filter = '',
  }) {
    final request = ListExamplesRequest()
      ..pageSize = pageSize
      ..filter = filter;
    
    return _client.watchExamples(request);
  }
  */
}

/// Example usage of the gRPC client
Future<void> runGrpcExample() async {
  final client = ExampleGrpcClient();
  
  try {
    await client.connect();
    
    // Uncomment after protobuf generation
    /*
    // Create a sample example
    final timestamp = TimestampMessage()
      ..seconds = DateTime.now().millisecondsSinceEpoch ~/ 1000
      ..nanos = 0;
      
    final example = ExampleMessage()
      ..id = 1
      ..name = 'Dart gRPC Example'
      ..email = 'grpc@example.com'
      ..tags.addAll(['grpc', 'dart', 'bufrnix'])
      ..description = 'Example created via gRPC client'
      ..createdAt = timestamp;
    
    // Create the example
    await client.createExample(example);
    
    // Get the example back
    await client.getExample(1);
    
    // List examples
    await client.listExamples(pageSize: 5);
    
    // Watch for updates (this would run indefinitely in a real app)
    print('Watching for example updates...');
    await for (final update in client.watchExamples().take(5)) {
      print('Received update: ${update.name}');
    }
    
    // Delete the example
    await client.deleteExample(1);
    */
    
    print('gRPC example completed successfully!');
  } catch (e) {
    print('gRPC example failed: $e');
  } finally {
    await client.disconnect();
  }
}