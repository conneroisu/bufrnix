{
  pkgs,
  lib,
  cfg,
  ...
}:
with lib; let
  enabled = cfg.enable or false;
  outputPath = cfg.outputPath;
  grpcOptions = cfg.options or [];
  namespace = cfg.namespace or "Generated";
  serviceNamespace = cfg.serviceNamespace or "Services";
  clientOnly = cfg.clientOnly or false;
  
  # Build gRPC options string
  grpcOptString = concatStringsSep "," (filter (s: s != "") ([
    (optionalString clientOnly "generate_server=false")
  ] ++ grpcOptions));
  
in {
  # Runtime dependencies for gRPC PHP
  runtimeInputs = optionals enabled [
    (cfg.package or pkgs.grpc)
  ];

  # Protoc plugin configuration for gRPC PHP
  protocPlugins = optionals enabled ([
    "--grpc_out=${outputPath}"
    "--plugin=protoc-gen-grpc=${pkgs.grpc}/bin/grpc_php_plugin"
  ] ++ (optional (grpcOptString != "") "--grpc_opt=${grpcOptString}"));

  # Initialization hooks for gRPC PHP
  initHooks = optionalString enabled ''
    # gRPC PHP initialization
    echo "Setting up gRPC PHP support..."
    mkdir -p "${outputPath}/${serviceNamespace}"
    
    # Create gRPC client example template
    if [ ! -f "${outputPath}/ExampleClient.php.template" ]; then
      cat > "${outputPath}/ExampleClient.php.template" << 'EOF'
    <?php
    /**
     * Example gRPC Client Template
     * Generated by Bufrnix
     */
    namespace ${namespace}\Client;
    
    use ${namespace}\${serviceNamespace}\ExampleServiceClient;
    use Grpc\ChannelCredentials;
    
    class ExampleClient 
    {
        private ExampleServiceClient $client;
        private array $options;
        
        public function __construct(string $host = 'localhost:50051', array $options = [])
        {
            $this->options = array_merge([
                'credentials' => ChannelCredentials::createInsecure(),
                'timeout' => 30000000, // 30 seconds in microseconds
            ], $options);
            
            $this->client = new ExampleServiceClient($host, $this->options);
        }
        
        /**
         * Example method - replace with your actual service methods
         */
        public function callService($request)
        {
            list($response, $status) = $this->client->YourMethod($request)->wait();
            
            if ($status->code !== \Grpc\STATUS_OK) {
                throw new \RuntimeException(sprintf(
                    'gRPC call failed with status %d: %s',
                    $status->code,
                    $status->details
                ));
            }
            
            return $response;
        }
        
        /**
         * Example streaming method
         */
        public function streamingCall($requests)
        {
            $call = $this->client->YourStreamingMethod();
            
            foreach ($requests as $request) {
                $call->write($request);
            }
            
            $call->writesDone();
            
            $responses = [];
            while ($response = $call->read()) {
                $responses[] = $response;
            }
            
            return $responses;
        }
    }
    EOF
    fi
    
    # Create server stub example if not client-only
    ${optionalString (!clientOnly) ''
      if [ ! -f "${outputPath}/ExampleService.php.template" ]; then
        cat > "${outputPath}/ExampleService.php.template" << 'EOF'
      <?php
      /**
       * Example gRPC Service Implementation Template
       * Generated by Bufrnix
       */
      namespace ${namespace}\Server;
      
      use ${namespace}\${serviceNamespace}\ExampleServiceInterface;
      
      class ExampleService implements ExampleServiceInterface
      {
          /**
           * Implement your service methods here
           */
          public function yourMethod($request, $context)
          {
              // Process the request
              $response = new \${namespace}\YourResponse();
              
              // Set response fields
              // $response->setResult($processedData);
              
              return $response;
          }
          
          /**
           * Example streaming method implementation
           */
          public function yourStreamingMethod($call, $context)
          {
              // Read all requests
              $requests = [];
              while ($request = $call->read()) {
                  $requests[] = $request;
              }
              
              // Process requests and send responses
              foreach ($requests as $request) {
                  $response = new \${namespace}\YourResponse();
                  // Process and set response
                  $call->write($response);
              }
          }
      }
      EOF
      fi
    ''}
  '';

  # Code generation hooks for gRPC PHP
  generateHooks = optionalString enabled ''
    # gRPC PHP code generation
    echo "Generating gRPC PHP code..."
    
    # Post-process generated files to add proper namespace imports
    find ${outputPath} -name "*.php" -type f | while read -r file; do
      # Ensure proper PSR-4 compliance
      if grep -q "namespace ${namespace}" "$file"; then
        echo "Processing gRPC file: $file"
      fi
    done
    
    # Create a gRPC health check service if it doesn't exist
    if [ ! -f "${outputPath}/HealthCheck.php" ]; then
      cat > "${outputPath}/HealthCheck.php" << 'EOF'
    <?php
    /**
     * gRPC Health Check Service
     * Implements the standard gRPC health checking protocol
     */
    namespace ${namespace}\Health;
    
    use Grpc\Health\V1\HealthCheckRequest;
    use Grpc\Health\V1\HealthCheckResponse;
    use Grpc\Health\V1\HealthInterface;
    
    class HealthCheckService implements HealthInterface
    {
        private array $services = [];
        
        public function setServiceStatus(string $service, int $status): void
        {
            $this->services[$service] = $status;
        }
        
        public function check(HealthCheckRequest $request, $context): HealthCheckResponse
        {
            $service = $request->getService();
            $response = new HealthCheckResponse();
            
            if (empty($service)) {
                // Overall health
                $status = empty($this->services) 
                    ? HealthCheckResponse\ServingStatus::SERVING
                    : min($this->services);
            } else {
                // Specific service health
                $status = $this->services[$service] 
                    ?? HealthCheckResponse\ServingStatus::SERVICE_UNKNOWN;
            }
            
            $response->setStatus($status);
            return $response;
        }
        
        public function watch(HealthCheckRequest $request, $context)
        {
            // Streaming health updates not implemented in this example
            throw new \RuntimeException('Watch not implemented');
        }
    }
    EOF
    fi
    
    echo "gRPC PHP generation complete"
  '';
}