{
  pkgs,
  lib,
  cfg,
  ...
}:
with lib; let
  enabled = cfg.enable or false;
  outputPath = cfg.outputPath;
  namespace = cfg.namespace or "Generated";
  grpcEnabled = cfg.grpcEnabled or false;
  
  # RoadRunner configuration
  workers = cfg.workers or 4;
  maxJobs = cfg.maxJobs or 64;
  maxMemory = cfg.maxMemory or 128;
  tlsEnabled = cfg.tlsEnabled or false;
  
in {
  # Runtime dependencies for RoadRunner PHP
  runtimeInputs = optionals enabled [
    (cfg.package or pkgs.roadrunner)
  ];

  # RoadRunner doesn't add protoc plugins, it's a runtime server
  protocPlugins = [];

  # Initialization hooks for RoadRunner PHP
  initHooks = optionalString enabled ''
    # RoadRunner PHP initialization
    echo "Setting up RoadRunner gRPC server..."
    
    # Create RoadRunner configuration if it doesn't exist
    if [ ! -f .rr.yaml ]; then
      echo "Creating RoadRunner configuration..."
      cat > .rr.yaml << 'EOF'
    version: "3"
    
    # RPC server configuration (for management)
    rpc:
      listen: tcp://127.0.0.1:6001
    
    # Server configuration
    server:
      command: "php worker.php"
      relay: pipes
      user: ""
      group: ""
      env:
        - GRPC_PHP_LOG_VERBOSITY: error
    
    # gRPC plugin configuration
    grpc:
      listen: "tcp://0.0.0.0:9001"
      proto:
        - "*.proto"
        - "proto/*.proto"
      
      pool:
        num_workers: ${toString workers}
        max_jobs: ${toString maxJobs}
        allocate_timeout: 60s
        destroy_timeout: 60s
        
        supervisor:
          watch_tick: 1s
          ttl: 0
          idle_ttl: 10s
          max_worker_memory: ${toString maxMemory}
          exec_ttl: 60s
      
      ${optionalString tlsEnabled ''
      # TLS configuration
      tls:
        key: "server.key"
        cert: "server.crt"
        root_ca: "ca.crt"
      ''}
    
    # Logging configuration
    logs:
      mode: production
      level: info
      encoding: json
      output: stdout
      err_output: stderr
      
      channels:
        http:
          level: debug
          output: stdout
        server:
          level: info
          output: stdout
        grpc:
          level: debug
          output: stdout
    
    # Metrics configuration (optional)
    metrics:
      address: "127.0.0.1:2112"
    
    # Health check endpoint
    status:
      address: "127.0.0.1:2114"
      
    # Reload plugin
    reload:
      enabled: true
      interval: 1s
      patterns:
        - ".php"
      services:
        grpc:
          enabled: true
          recursive: true
          dirs:
            - "."
    EOF
    fi
    
    # Create worker.php if it doesn't exist
    if [ ! -f worker.php ]; then
      echo "Creating RoadRunner worker..."
      cat > worker.php << 'EOF'
    <?php
    /**
     * RoadRunner gRPC Worker
     * Generated by Bufrnix
     */
    declare(strict_types=1);
    
    use Spiral\RoadRunner\GRPC\Server;
    use Spiral\RoadRunner\Worker;
    
    require __DIR__ . '/vendor/autoload.php';
    
    // Create gRPC server
    $server = new Server(null, [
        'debug' => false, // Set to true for development
    ]);
    
    // Register your service implementations here
    // Example:
    // $server->registerService(
    //     \${namespace}\Services\YourServiceInterface::class,
    //     new \App\Services\YourServiceImplementation()
    // );
    
    // Start the server
    $server->serve(Worker::create());
    EOF
    fi
    
    # Create example service implementation
    if [ ! -f "${outputPath}/ServiceImplementation.php.template" ]; then
      cat > "${outputPath}/ServiceImplementation.php.template" << 'EOF'
    <?php
    /**
     * Example RoadRunner gRPC Service Implementation
     * Generated by Bufrnix
     */
    namespace App\Services;
    
    use ${namespace}\ExampleRequest;
    use ${namespace}\ExampleResponse;
    use ${namespace}\Services\ExampleServiceInterface;
    use Spiral\RoadRunner\GRPC\ContextInterface;
    
    class ExampleService implements ExampleServiceInterface
    {
        /**
         * Example unary RPC method
         */
        public function processRequest(
            ContextInterface $ctx,
            ExampleRequest $request
        ): ExampleResponse {
            // Access context values
            $metadata = $ctx->getValue('metadata');
            
            // Process the request
            $result = $this->handleBusinessLogic($request);
            
            // Create and return response
            $response = new ExampleResponse();
            $response->setResult($result);
            
            return $response;
        }
        
        /**
         * Example server streaming RPC
         */
        public function streamData(
            ContextInterface $ctx,
            ExampleRequest $request
        ): \Generator {
            // Stream multiple responses
            for ($i = 0; $i < 10; $i++) {
                $response = new ExampleResponse();
                $response->setResult("Stream item $i");
                
                yield $response;
                
                // Simulate work
                usleep(100000); // 100ms
            }
        }
        
        /**
         * Example bidirectional streaming RPC
         */
        public function bidirectionalStream(
            ContextInterface $ctx,
            \Iterator $requests
        ): \Generator {
            foreach ($requests as $request) {
                // Process each incoming request
                $response = new ExampleResponse();
                $response->setResult("Echo: " . $request->getData());
                
                yield $response;
            }
        }
        
        private function handleBusinessLogic(ExampleRequest $request): string
        {
            // Your business logic here
            return "Processed: " . $request->getData();
        }
    }
    EOF
    fi
    
    # Create a development helper script
    if [ ! -f roadrunner-dev.sh ]; then
      cat > roadrunner-dev.sh << 'EOF'
    #!/usr/bin/env bash
    # RoadRunner development helper script
    
    case "$1" in
      start)
        echo "Starting RoadRunner server..."
        rr serve -c .rr.yaml
        ;;
      debug)
        echo "Starting RoadRunner in debug mode..."
        rr serve -c .rr.yaml -d
        ;;
      workers)
        echo "Checking worker status..."
        rr workers -c .rr.yaml
        ;;
      reset)
        echo "Resetting RoadRunner workers..."
        rr reset -c .rr.yaml
        ;;
      stop)
        echo "Stopping RoadRunner..."
        rr stop -c .rr.yaml
        ;;
      *)
        echo "Usage: $0 {start|debug|workers|reset|stop}"
        exit 1
    esac
    EOF
      chmod +x roadrunner-dev.sh
    fi
  '';

  # Code generation hooks for RoadRunner PHP
  generateHooks = optionalString enabled ''
    # RoadRunner-specific code generation
    echo "Configuring RoadRunner gRPC server..."
    
    # Create service registration helper
    if [ ! -f "${outputPath}/ServiceRegistry.php" ]; then
      cat > "${outputPath}/ServiceRegistry.php" << 'EOF'
    <?php
    /**
     * RoadRunner Service Registry Helper
     * Generated by Bufrnix
     */
    namespace ${namespace}\RoadRunner;
    
    use Spiral\RoadRunner\GRPC\Server;
    
    class ServiceRegistry
    {
        private Server $server;
        private array $services = [];
        
        public function __construct(Server $server)
        {
            $this->server = $server;
        }
        
        /**
         * Register a service implementation
         */
        public function register(string $interface, object $implementation): self
        {
            $this->services[$interface] = $implementation;
            $this->server->registerService($interface, $implementation);
            
            return $this;
        }
        
        /**
         * Register multiple services at once
         */
        public function registerAll(array $services): self
        {
            foreach ($services as $interface => $implementation) {
                $this->register($interface, $implementation);
            }
            
            return $this;
        }
        
        /**
         * Get registered services
         */
        public function getServices(): array
        {
            return $this->services;
        }
        
        /**
         * Create from service definitions
         */
        public static function fromDefinitions(Server $server, array $definitions): self
        {
            $registry = new self($server);
            
            foreach ($definitions as $interface => $implementationClass) {
                if (is_string($implementationClass)) {
                    $implementation = new $implementationClass();
                } else {
                    $implementation = $implementationClass;
                }
                
                $registry->register($interface, $implementation);
            }
            
            return $registry;
        }
    }
    EOF
    fi
    
    # Create performance monitoring helper
    if [ ! -f "${outputPath}/PerformanceMonitor.php" ]; then
      cat > "${outputPath}/PerformanceMonitor.php" << 'EOF'
    <?php
    /**
     * RoadRunner Performance Monitor
     * Generated by Bufrnix
     */
    namespace ${namespace}\RoadRunner;
    
    use Spiral\RoadRunner\GRPC\ContextInterface;
    
    class PerformanceMonitor
    {
        private array $metrics = [];
        
        /**
         * Start timing a request
         */
        public function startTimer(string $method): float
        {
            $startTime = microtime(true);
            $this->metrics[$method]['count'] = ($this->metrics[$method]['count'] ?? 0) + 1;
            
            return $startTime;
        }
        
        /**
         * End timing and record metrics
         */
        public function endTimer(string $method, float $startTime): void
        {
            $duration = microtime(true) - $startTime;
            
            if (!isset($this->metrics[$method]['total'])) {
                $this->metrics[$method]['total'] = 0;
                $this->metrics[$method]['min'] = PHP_FLOAT_MAX;
                $this->metrics[$method]['max'] = 0;
            }
            
            $this->metrics[$method]['total'] += $duration;
            $this->metrics[$method]['min'] = min($this->metrics[$method]['min'], $duration);
            $this->metrics[$method]['max'] = max($this->metrics[$method]['max'], $duration);
            $this->metrics[$method]['avg'] = $this->metrics[$method]['total'] / $this->metrics[$method]['count'];
        }
        
        /**
         * Get performance metrics
         */
        public function getMetrics(): array
        {
            return $this->metrics;
        }
        
        /**
         * Reset metrics
         */
        public function reset(): void
        {
            $this->metrics = [];
        }
        
        /**
         * Create a monitoring wrapper for services
         */
        public function wrapService(object $service): object
        {
            return new class($service, $this) {
                private $service;
                private $monitor;
                
                public function __construct($service, $monitor)
                {
                    $this->service = $service;
                    $this->monitor = $monitor;
                }
                
                public function __call($method, $args)
                {
                    $timer = $this->monitor->startTimer($method);
                    
                    try {
                        $result = $this->service->$method(...$args);
                        $this->monitor->endTimer($method, $timer);
                        return $result;
                    } catch (\Throwable $e) {
                        $this->monitor->endTimer($method, $timer);
                        throw $e;
                    }
                }
            };
        }
    }
    EOF
    fi
    
    echo "RoadRunner configuration complete"
    echo ""
    echo "To start the RoadRunner server:"
    echo "  ./roadrunner-dev.sh start    # Production mode"
    echo "  ./roadrunner-dev.sh debug    # Debug mode"
    echo ""
  '';
}